# -*- coding: utf-8 -*-
"""Bangalore_realEstate

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GPYDkQhrFRSPpV88D30HI-V3lUARfDt_
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
# %matplotlib inline
import matplotlib
matplotlib.rcParams["figure.figsize"]=(20,10)

from google.colab import files
uploaded = files.upload()

df1 = pd.read_csv("Bengaluru_House_Data.csv")
df1.head()

df1.shape

df1.groupby('area_type')['area_type'].agg('count')

df2=df1.drop(['area_type','society','balcony','availability'],axis='columns')
df2.head()

df3=df2.dropna()
df3.isnull().sum()

df3.shape

df3['size'].unique()

df3['bhk']=df3['size'].apply(lambda x: x.split(' ')[0])

df3.head()

df3['bhk'].unique()

df3['bhk'].dtype

df3['bhk'].unique()[:50]

# Extract numbers and convert to float
df3['bhk'] = df3['bhk'].astype(str).str.extract('(\d+)').astype(float)

df3[df3['bhk'] > 20]

df3.total_sqft.unique()

def is_float(x):
  try:
    float(x)
  except:
    return False
  return True

df3[df3['total_sqft'].apply(is_float)].head(15)

df3[~df3['total_sqft'].apply(is_float)].head(15)

def convert_sqft_to_num(x):
  tokens=x.split('-')
  if len(tokens)==2:
    return (float(tokens[0])+float(tokens[1]))/2
  try:
    return float(x)
  except:
    return None

convert_sqft_to_num('2166')

convert_sqft_to_num('1015 - 1540')

df4=df3.copy()
df4['total_sqft']=df4['total_sqft'].apply(convert_sqft_to_num)
df4.head(35)

df5=df4.copy()
df5['price_per_sqft']=df5['price']*100000/df5['total_sqft']
df5.head(10)

len(df5.location.unique())

df5.location=df5.location.apply(lambda x:x.strip())
location_stats=df5.groupby('location')['location'].agg('count').sort_values(ascending=False)
location_stats

len(location_stats[location_stats<=10])

location_stats_less_than_10=location_stats[location_stats<=10]
location_stats_less_than_10

df5.location=df5.location.apply(lambda x: 'other' if x in location_stats_less_than_10 else x)
len(df5.location.unique())

df5.head(200)

df5[df5.total_sqft/df5.bhk<300].head()

df5.shape

df6=df5[~(df5.total_sqft/df5.bhk<300)]
df6.shape

df6.price_per_sqft.describe()

def remove_pps_outliers(df):
  df_out=pd.DataFrame()
  for key, subdf in df.groupby('location'):
    m=np.mean(subdf.price_per_sqft)
    st=np.std(subdf.price_per_sqft)
    reduced_df=subdf[(subdf.price_per_sqft>(m-st))& (subdf.price_per_sqft<=(m+st))]
    df_out=pd.concat([df_out, reduced_df], ignore_index=True)
  return df_out
df7=remove_pps_outliers(df6)
df7.shape

def plot_scatter_chart(df, location):
    bhk2 = df[(df.location == location) & (df.bhk == 2)]
    bhk3 = df[(df.location == location) & (df.bhk == 3)]
    matplotlib.rcParams['figure.figsize'] = (15, 10)
    plt.scatter(bhk2.total_sqft, bhk2.price, color='blue', label='2 BHK', s=50)
    plt.scatter(bhk3.total_sqft, bhk3.price, marker='+', color='green', label='3 BHK', s=50)
    plt.xlabel("Total Square Feet Area")
    plt.ylabel("Price")
    plt.title(location)
    plt.legend()

plot_scatter_chart(df7, "Rajaji Nagar")

def plot_scatter_chart(df, location):
    bhk2 = df[(df.location == location) & (df.bhk == 2)]
    bhk3 = df[(df.location == location) & (df.bhk == 3)]
    matplotlib.rcParams['figure.figsize'] = (15, 10)
    plt.scatter(bhk2.total_sqft, bhk2.price, color='blue', label='2 BHK', s=50)
    plt.scatter(bhk3.total_sqft, bhk3.price, marker='+', color='green', label='3 BHK', s=50)
    plt.xlabel("Total Square Feet Area")
    plt.ylabel("Price")
    plt.title(location)
    plt.legend()

plot_scatter_chart(df7, "Hebbal")

def plot_scatter_chart(df, location):
    bhk2 = df[(df.location == location) & (df.bhk == 2)]
    bhk3 = df[(df.location == location) & (df.bhk == 3)]
    matplotlib.rcParams['figure.figsize'] = (15, 10)
    plt.scatter(bhk2.total_sqft, bhk2.price, color='blue', label='2 BHK', s=50)
    plt.scatter(bhk3.total_sqft, bhk3.price, marker='+', color='green', label='3 BHK', s=50)
    plt.xlabel("Total Square Feet Area")
    plt.ylabel("Price")
    plt.title(location)
    plt.legend()

plot_scatter_chart(df7, "Nagasandra")

def remove_bhk_outliers(df):
    exclude_indices = np.array([])
    for location, location_df in df.groupby('location'):
        bhk_stats = {}
        for bhk, bhk_df in location_df.groupby('bhk'):
            bhk_stats[bhk] = {
                'mean': np.mean(bhk_df.price_per_sqft),
                'std': np.std(bhk_df.price_per_sqft),
                'count': bhk_df.shape[0]
            }
        for bhk, bhk_df in location_df.groupby('bhk'):
            stats = bhk_stats.get(bhk-1)
            if stats and stats['count'] > 5:
                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft < stats['mean']].index.values)
    return df.drop(exclude_indices, axis='index')

df8 = remove_bhk_outliers(df7)
df8.shape

plot_scatter_chart(df8, "Hebbal")

import matplotlib
matplotlib.rcParams["figure.figsize"]=(20,10)
plt.hist(df8.price_per_sqft,rwidth=0.8)
plt.xlabel("Price Per Square Feet")
plt.ylabel("Count")

df8.bath.unique()

df8[df8.bath>10]

df9=df8[df8.bath<df8.bhk+2]
df9.shape



df8.shape

df10=df9.drop(['size','price_per_sqft'],axis='columns')
df10.head(15)

dummies=pd.get_dummies(df10.location)
dummies.head(10)

df10.shape

df11=pd.concat([df10, dummies.drop('other',axis='columns')],axis='columns')
df11.head(3)

df12=df11.drop('location',axis='columns')
df12.head()

df12.shape

x=df12.drop('price',axis='columns')
x.head()

y=df12.price
y.head()

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=10)

from sklearn.linear_model import LinearRegression
lr_clf=LinearRegression()
lr_clf.fit(X_train,y_train)
lr_clf.score(X_test,y_test)

from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import cross_val_score
cv=ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)
cross_val_score(LinearRegression(),x,y,cv=cv)

from sklearn.linear_model import Lasso, LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV

def find_best_model_using_gridsearchcv(X,y):
    algos = {
        'linear_regression': {
            'model': LinearRegression(),
            'params': {
                'fit_intercept': [True, False],
                'positive': [True, False]
            }
        },
        'lasso': {
            'model': Lasso(),
            'params': {
                'alpha': [1, 2],
                'selection': ['random', 'cyclic']
            }
        },
        'decision_tree': {
            'model': DecisionTreeRegressor(),
            'params': {
                'criterion': ['squared_error', 'friedman_mse'],
                'splitter': ['best', 'random']
            }
        }
    }

    scores = []
    cv=ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)
    for algo_name, config in algos.items():
        gs = GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)
        gs.fit(X, y)
        scores.append({
            'model': algo_name,
            'best_score': gs.best_score_,
            'best_params': gs.best_params_
        })

    return pd.DataFrame(scores, columns=['model', 'best_score', 'best_params'])
find_best_model_using_gridsearchcv(x,y)

x.columns

import numpy as np
import pandas as pd
import pickle
def predict_price(location, sqft, bath, bhk):
    with open('lr_model.pkl', 'rb') as f:
        lr_clf = pickle.load(f)
    with open('columns.pkl', 'rb') as f:
        columns = pickle.load(f)
    z = np.zeros(len(columns))
    z[0] = sqft
    z[1] = bath
    z[2] = bhk
    if location in columns:
        loc_index = np.where(columns == location)[0][0]
        z[loc_index] = 1
    input_df = pd.DataFrame([z], columns=columns)
    return lr_clf.predict(input_df)[0]

import pickle

with open('lr_model.pkl', 'rb') as f:
    model = pickle.load(f)

print(type(model))

with open('lr_model.pkl', 'wb') as f:
    pickle.dump(lr_clf, f)
with open('columns.pkl', 'wb') as f:
    pickle.dump(x.columns, f)

predicted_price = predict_price("Hebbal", 1000, 1, 1)
print(f"Predicted Price: ₹ {round(predicted_price, 2)} Lakhs")

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV, ShuffleSplit
from sklearn.metrics import mean_squared_error
import numpy as np
import pickle
rf_clf = RandomForestRegressor(random_state=42)
params = {
    'n_estimators': [100],
    'max_depth': [None, 10],
    'min_samples_split': [2],
    'min_samples_leaf': [1]
}
cv = ShuffleSplit(n_splits=3, test_size=0.2, random_state=42)
gs = GridSearchCV(rf_clf, params, cv=cv, n_jobs=-1)
gs.fit(x, y)
rf_clf = gs.best_estimator_
y_pred = rf_clf.predict(x)
rmse = np.sqrt(mean_squared_error(y, y_pred))
print("Random Forest RMSE on current data:", rmse)
with open('rf_model.pkl', 'wb') as f:
    pickle.dump(rf_clf, f)

def predict_price_rf(location, sqft, bath, bhk):
    import pandas as pd
    import numpy as np
    import pickle
    with open('rf_model.pkl', 'rb') as f:
        rf_clf = pickle.load(f)
    cols = x.columns
    z = np.zeros(len(cols))
    z[0] = sqft
    z[1] = bath
    z[2] = bhk
    if location in cols:
        loc_index = np.where(cols == location)[0][0]
        z[loc_index] = 1
    input_df = pd.DataFrame([z], columns=cols)
    return rf_clf.predict(input_df)[0]

predicted_price = predict_price_rf("Hebbal", 2000, 2, 3)
print(f"Predicted Price: ₹ {round(predicted_price, 2)} Lakhs")